
Movie Recommendation System Project using R

Reference: https://data-flair.training/blogs/data-science-r-movie-recommendation/

First start by installing necessary packages.
```{r}
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
```


Observing how the datasets look like.
```{r}
movie_data <- read.csv("movies.csv", stringsAsFactors = FALSE)
rating_data <- read.csv("ratings.csv")

summary(movie_data)

head(movie_data)

```


```{r}
summary(rating_data)

head(rating_data)

```

Pre-processing the data
``` {r}
movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors = FALSE)
library(data.table)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], 
                                        '[|]', 
                                        type.convert = TRUE), 
                                        stringsAsFactors = FALSE) 
colnames(movie_genre2) <- c(1:10)

list_genre <- c("Action", "Adventure", "Animation", "Children", 
                "Comedy", "Crime","Documentary", "Drama", "Fantasy",
                "Film-Noir", "Horror", "Musical", "Mystery","Romance",
                "Sci-Fi", "Thriller", "War", "Western")

genre_mat1 <- matrix(0,10330,18)
genre_mat1[1,] <- list_genre
colnames(genre_mat1) <- list_genre

for (index in 1:nrow(movie_genre2)) {
  for (col in 1:ncol(movie_genre2)) {
    gen_col = which(genre_mat1[1,] == movie_genre2[index,col])
    genre_mat1[index + 1,gen_col] <- 1
  }
}

genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors = FALSE) # remove first row, which was the genre list
for (col in 1:ncol(genre_mat2)) {
  genre_mat2[,col] <- as.integer(genre_mat2[,col]) # convert from char to int
} 

str(genre_mat2)
```
Through this step, values of 0 and 1 are given for each genres movies fall in. 0 for no and 1 for yes. 



```{r}
SearchMatrix <- cbind(movie_data[,1:2], genre_mat2[])
head(SearchMatrix)
```

Most of the movies fall under several genres.For an example, Toy Story falls under Adventure, Animation, Children, Comedy, and Fantasy. In order for the movie recommendation system to use ratings through recommenderlabs, the matrix has to be converted into a sparse matrix.

```{r}
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating", na.rm = FALSE) 
ratingMatrix <- as.matrix(ratingMatrix[,-1]) # remove userIds # convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix")
ratingMatrix
```

```{r}
recommendation_model <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")

lapply(recommendation_model, "[[", "description")
```

```{r}
recommendation_model$IBCF_realRatingMatrix$parameters
```

Collaborative Filtering is a method for movie recommendations that relies on aggregating user preferences from a wide range of users. In this approach, if User A enjoys action films and User B shares this preference, the system will suggest movies to User B based on their similarity to User A's choices, and vice versa. The essence of movie recommendations is building a connection of likeness between different users. To achieve this, recommenderlab leverages diverse similarity operators such as cosine, Pearson, and Jaccard to compute these relationships.

```{r}
similarity_mat <- similarity(ratingMatrix[1:4, ],
                             method = "cosine",
                             which = "users")
as.matrix(similarity_mat)

image(as.matrix(similarity_mat), main = "Similarities of User")
```
In the matrix, each row and column represents a user. We have taken four users and each cell in this matrix represents the similarity that is shared between the two users.

```{r}
movie_similarity <- similarity(ratingMatrix[, 1:4], 
                               method = "cosine", 
                               which = "items")
as.matrix(movie_similarity)

image(as.matrix(movie_similarity), main = "Similarity of Movies")
```

Above is for the similarity shared between the films.

```{r}
rating_values <- as.vector(ratingMatrix@data)
unique(rating_values) # extracting unique ratings
Table_of_Ratings <- table(rating_values) # creating a count of movie ratings
Table_of_Ratings
```
```{r}
library(ggplot2)
movie_views <- colCounts(ratingMatrix) # count views for each movie
table_views <- data.frame(movie = names(movie_views),
                          views = movie_views) # create dataframe of views
table_views <- table_views[order(table_views$views,
                                 decreasing = TRUE), ] # sort by number of views
table_views$title <- NA
for (index in 1:10325){
  table_views[index,3] <- as.character(subset(movie_data,
                                         movie_data$movieId == table_views[index,1])$title)
}
table_views[1:6,]
```

```{r}
ggplot(table_views[1:6, ], aes(x = title, y = views)) +
  geom_bar(stat = "identity", fill = 'steelblue') +
  geom_text(aes(label = views), vjust = -0.3, size = 3.5) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +

  ggtitle("Total Views of the Top Films")
```
```{r}
image(ratingMatrix[1:20, 1:25], axes = FALSE, main = "Heatmap of the first 25 rows and 25 columns")
```
Data preparation is composed of three steps: selecting useful data, normalizating data, and binarizing the data. 
Filtering out and selecting useful data is the first step.
```{r}
movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 50, # filtering the films from least-watched ones
                             colCounts(ratingMatrix) > 50]
movie_ratings
```

```{r}
minimum_movies<- quantile(rowCounts(movie_ratings), 0.98)
minimum_users <- quantile(colCounts(movie_ratings), 0.98)
image(movie_ratings[rowCounts(movie_ratings) > minimum_movies,
                     colCounts(movie_ratings) > minimum_users],
main = "Heatmap of the top users and movies")

```
```{r}
average_ratings <- rowMeans(movie_ratings)
qplot(average_ratings, fill = I("steelblue"), col = I("red")) +
  ggtitle("Distribution of the average ratings per user")
```
Second step is to normalize the data. Certain users may exhibit a tendency to consistently assign either high or low ratings to all the movies they've watched. This can introduce bias when building our model. To mitigate this bias, we employ a technique known as data normalization. Normalization is a data preprocessing step aimed at standardizing numerical values within a column to a common scale without distorting the original value range. Through normalization, we adjust the average rating value of our dataset to 0. Subsequently, we generate a heatmap to visually represent the normalized ratings.

```{r}
normalized_ratings <- normalize(movie_ratings)
sum(rowMeans(normalized_ratings) > 0.00001)

image(normalized_ratings[rowCounts(normalized_ratings) > minimum_movies,
                          colCounts(normalized_ratings) > minimum_users],
main = "Normalized Ratings of the Top Users")
```
Third step is to binarize the data. Data binarization involves converting our data into a binary format, which simplifies the operation of recommendation systems. In this process, we create a matrix where a value is set to 1 if the rating exceeds 3 and 0 if it does not.

```{r}
binary_minimum_movies <- quantile(rowCounts(movie_ratings), 0.95)
binary_minimum_users <- quantile(colCounts(movie_ratings), 0.95) # movies_watched <- binarize(movie_ratings, minRating = 1)

good_rated_films <- binarize(movie_ratings, minRating = 3)
image(good_rated_films[rowCounts(movie_ratings) > binary_minimum_movies,
colCounts(movie_ratings) > binary_minimum_users],
main = "Heatmap of the top users and movies")
```

We are going to create our own custom Item-Based Collaborative Filtering System. This approach revolves around identifying item similarities based on users' ratings of those items. The algorithm's initial step involves constructing a table of items that are similar, determined by the preferences of the customers who have purchased them. This collection of similar items is subsequently integrated into our recommendation system.

To establish the similarity between individual products and their associated items, we employ the following algorithm:
1. For every item (i1) found in the product catalog, which has been purchased by customer C.
2. And, for each item (i2) also bought by the same customer C.
3. Generate a record indicating that the customer has purchased both items i1 and i2.
4. Compute the similarity measure between i1 and i2.

We will construct this filtering system by dividing the dataset into two sets: an 80% training set and a 20% test set.
```{r}
sampled_data<- sample(x = c(TRUE, FALSE),
                      size = nrow(movie_ratings),
                      replace = TRUE,
                      prob = c(0.8, 0.2))
training_data <- movie_ratings[sampled_data, ]
testing_data <- movie_ratings[!sampled_data, ]
```

Our next step involves an exploration of the default parameters of our Item-Based Collaborative Filter. The first parameter we focus on is "k," which represents the number of items used for computing their similarities. In this case, k is set to 30. As a result, the algorithm will identify the 30 most similar items and retain their corresponding values. We employ the cosine method, which is the default option, although the Pearson method can also be utilized.

```{r}
recommendation_system <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")

recommen_model <- Recommender(data = training_data,
                          method = "IBCF",
                          parameter = list(k = 30))
recommen_model
class(recommen_model)
```

```{r}
model_info <- getModel(recommen_model)
class(model_info$sim)
dim(model_info$sim)
top_items <- 20
image(model_info$sim[1:top_items, 1:top_items],
   main = "Heatmap of the first rows and columns")
```

```{r}
sum_rows <- rowSums(model_info$sim > 0)
table(sum_rows)

sum_cols <- colSums(model_info$sim > 0)
qplot(sum_cols, fill = I("steelblue"), col = I("red")) + ggtitle("Distribution of the column count")
```

```{r}
top_recommendations <- 10 # the number of items to recommend to each user
predicted_recommendations <- predict(object = recommen_model,
                          newdata = testing_data,
                          n = top_recommendations)
predicted_recommendations
```

```{r}
user1 <- predicted_recommendations@items[[1]] # recommendation for the first user
movies_user1 <- predicted_recommendations@itemLabels[user1]
movies_user2 <- movies_user1
for (index in 1:10){
  movies_user2[index] <- as.character(subset(movie_data,
                                         movie_data$movieId == movies_user1[index])$title)
}
movies_user2
```

```{r}
recommendation_matrix <- sapply(predicted_recommendations@items,
                      function(x){ as.integer(colnames(movie_ratings)[x]) }) # matrix with the recommendations for each user

#dim(recc_matrix)
recommendation_matrix[,1:4]
```